"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[584],{92584:function(e,t,n){n.d(t,{S:function(){return tt},T:function(){return tn},a:function(){return ti}});var i,r,s,o,a=Object.defineProperty,l=(e,t)=>a(e,"name",{value:t,configurable:!0});function u(e){return c(e,[])}function c(e,t){switch(typeof e){case"string":return JSON.stringify(e);case"function":return e.name?`[function ${e.name}]`:"[function]";case"object":return p(e,t);default:return String(e)}}function p(e,t){if(null===e)return"null";if(t.includes(e))return"[Circular]";let n=[...t,e];if(d(e)){let i=e.toJSON();if(i!==e)return"string"==typeof i?i:c(i,n)}else if(Array.isArray(e))return h(e,n);return f(e,n)}function d(e){return"function"==typeof e.toJSON}function f(e,t){let n=Object.entries(e);if(0===n.length)return"{}";if(t.length>2)return"["+y(e)+"]";let i=n.map(([e,n])=>e+": "+c(n,t));return"{ "+i.join(", ")+" }"}function h(e,t){if(0===e.length)return"[]";if(t.length>2)return"[Array]";let n=Math.min(10,e.length),i=e.length-n,r=[];for(let s=0;s<n;++s)r.push(c(e[s],t));return 1===i?r.push("... 1 more item"):i>1&&r.push(`... ${i} more items`),"["+r.join(", ")+"]"}function y(e){let t=Object.prototype.toString.call(e).replace(/^\[object /,"").replace(/]$/,"");if("Object"===t&&"function"==typeof e.constructor){let n=e.constructor.name;if("string"==typeof n&&""!==n)return n}return t}function v(e,t){let n=Boolean(e);if(!n)throw Error(null!=t?t:"Unexpected invariant triggered.")}l(u,"inspect"),l(c,"formatValue"),l(p,"formatObjectValue"),l(d,"isJSONable"),l(f,"formatObject"),l(h,"formatArray"),l(y,"getObjectTag"),l(v,"invariant");let m;function N(e){return 9===e||32===e}function T(e){return e>=48&&e<=57}function I(e){return e>=97&&e<=122||e>=65&&e<=90}function E(e){return I(e)||95===e}function g(e){return I(e)||T(e)||95===e}function b(e,t){let n=e.replace(/"""/g,'\\"""'),i=n.split(/\r\n|[\n\r]/g),r=1===i.length,s=i.length>1&&i.slice(1).every(e=>0===e.length||N(e.charCodeAt(0))),o=n.endsWith('\\"""'),a=e.endsWith('"')&&!o,l=e.endsWith("\\"),u=a||l,c=!(null!=t&&t.minimize)&&(!r||e.length>70||u||s||o),p="",d=r&&N(e.charCodeAt(0));return(c&&!d||s)&&(p+="\n"),p+=n,(c||u)&&(p+="\n"),'"""'+p+'"""'}function O(e){return`"${e.replace(S,A)}"`}(i=m||(m={})).QUERY="QUERY",i.MUTATION="MUTATION",i.SUBSCRIPTION="SUBSCRIPTION",i.FIELD="FIELD",i.FRAGMENT_DEFINITION="FRAGMENT_DEFINITION",i.FRAGMENT_SPREAD="FRAGMENT_SPREAD",i.INLINE_FRAGMENT="INLINE_FRAGMENT",i.VARIABLE_DEFINITION="VARIABLE_DEFINITION",i.SCHEMA="SCHEMA",i.SCALAR="SCALAR",i.OBJECT="OBJECT",i.FIELD_DEFINITION="FIELD_DEFINITION",i.ARGUMENT_DEFINITION="ARGUMENT_DEFINITION",i.INTERFACE="INTERFACE",i.UNION="UNION",i.ENUM="ENUM",i.ENUM_VALUE="ENUM_VALUE",i.INPUT_OBJECT="INPUT_OBJECT",i.INPUT_FIELD_DEFINITION="INPUT_FIELD_DEFINITION",l(N,"isWhiteSpace"),l(T,"isDigit$1"),l(I,"isLetter"),l(E,"isNameStart"),l(g,"isNameContinue"),l(b,"printBlockString"),l(O,"printString");let S=/[\x00-\x1f\x22\x5c\x7f-\x9f]/g;function A(e){return L[e.charCodeAt(0)]}l(A,"escapedReplacer");let L=["\\u0000","\\u0001","\\u0002","\\u0003","\\u0004","\\u0005","\\u0006","\\u0007","\\b","\\t","\\n","\\u000B","\\f","\\r","\\u000E","\\u000F","\\u0010","\\u0011","\\u0012","\\u0013","\\u0014","\\u0015","\\u0016","\\u0017","\\u0018","\\u0019","\\u001A","\\u001B","\\u001C","\\u001D","\\u001E","\\u001F","","",'\\"',"","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","\\\\","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","\\u007F","\\u0080","\\u0081","\\u0082","\\u0083","\\u0084","\\u0085","\\u0086","\\u0087","\\u0088","\\u0089","\\u008A","\\u008B","\\u008C","\\u008D","\\u008E","\\u008F","\\u0090","\\u0091","\\u0092","\\u0093","\\u0094","\\u0095","\\u0096","\\u0097","\\u0098","\\u0099","\\u009A","\\u009B","\\u009C","\\u009D","\\u009E","\\u009F"];function _(e,t){let n=Boolean(e);if(!n)throw Error(t)}l(_,"devAssert");let w={Name:[],Document:["definitions"],OperationDefinition:["name","variableDefinitions","directives","selectionSet"],VariableDefinition:["variable","type","defaultValue","directives"],Variable:["name"],SelectionSet:["selections"],Field:["alias","name","arguments","directives","selectionSet"],Argument:["name","value"],FragmentSpread:["name","directives"],InlineFragment:["typeCondition","directives","selectionSet"],FragmentDefinition:["name","variableDefinitions","typeCondition","directives","selectionSet"],IntValue:[],FloatValue:[],StringValue:[],BooleanValue:[],NullValue:[],EnumValue:[],ListValue:["values"],ObjectValue:["fields"],ObjectField:["name","value"],Directive:["name","arguments"],NamedType:["name"],ListType:["type"],NonNullType:["type"],SchemaDefinition:["description","directives","operationTypes"],OperationTypeDefinition:["type"],ScalarTypeDefinition:["description","name","directives"],ObjectTypeDefinition:["description","name","interfaces","directives","fields"],FieldDefinition:["description","name","arguments","type","directives"],InputValueDefinition:["description","name","type","defaultValue","directives"],InterfaceTypeDefinition:["description","name","interfaces","directives","fields"],UnionTypeDefinition:["description","name","directives","types"],EnumTypeDefinition:["description","name","directives","values"],EnumValueDefinition:["description","name","directives"],InputObjectTypeDefinition:["description","name","directives","fields"],DirectiveDefinition:["description","name","arguments","locations"],SchemaExtension:["directives","operationTypes"],ScalarTypeExtension:["name","directives"],ObjectTypeExtension:["name","interfaces","directives","fields"],InterfaceTypeExtension:["name","interfaces","directives","fields"],UnionTypeExtension:["name","directives","types"],EnumTypeExtension:["name","directives","values"],InputObjectTypeExtension:["name","directives","fields"]},D=new Set(Object.keys(w));function F(e){let t=null==e?void 0:e.kind;return"string"==typeof t&&D.has(t)}l(F,"isNode");let x;(r=x||(x={})).QUERY="query",r.MUTATION="mutation",r.SUBSCRIPTION="subscription";let R;(s=R||(R={})).NAME="Name",s.DOCUMENT="Document",s.OPERATION_DEFINITION="OperationDefinition",s.VARIABLE_DEFINITION="VariableDefinition",s.SELECTION_SET="SelectionSet",s.FIELD="Field",s.ARGUMENT="Argument",s.FRAGMENT_SPREAD="FragmentSpread",s.INLINE_FRAGMENT="InlineFragment",s.FRAGMENT_DEFINITION="FragmentDefinition",s.VARIABLE="Variable",s.INT="IntValue",s.FLOAT="FloatValue",s.STRING="StringValue",s.BOOLEAN="BooleanValue",s.NULL="NullValue",s.ENUM="EnumValue",s.LIST="ListValue",s.OBJECT="ObjectValue",s.OBJECT_FIELD="ObjectField",s.DIRECTIVE="Directive",s.NAMED_TYPE="NamedType",s.LIST_TYPE="ListType",s.NON_NULL_TYPE="NonNullType",s.SCHEMA_DEFINITION="SchemaDefinition",s.OPERATION_TYPE_DEFINITION="OperationTypeDefinition",s.SCALAR_TYPE_DEFINITION="ScalarTypeDefinition",s.OBJECT_TYPE_DEFINITION="ObjectTypeDefinition",s.FIELD_DEFINITION="FieldDefinition",s.INPUT_VALUE_DEFINITION="InputValueDefinition",s.INTERFACE_TYPE_DEFINITION="InterfaceTypeDefinition",s.UNION_TYPE_DEFINITION="UnionTypeDefinition",s.ENUM_TYPE_DEFINITION="EnumTypeDefinition",s.ENUM_VALUE_DEFINITION="EnumValueDefinition",s.INPUT_OBJECT_TYPE_DEFINITION="InputObjectTypeDefinition",s.DIRECTIVE_DEFINITION="DirectiveDefinition",s.SCHEMA_EXTENSION="SchemaExtension",s.SCALAR_TYPE_EXTENSION="ScalarTypeExtension",s.OBJECT_TYPE_EXTENSION="ObjectTypeExtension",s.INTERFACE_TYPE_EXTENSION="InterfaceTypeExtension",s.UNION_TYPE_EXTENSION="UnionTypeExtension",s.ENUM_TYPE_EXTENSION="EnumTypeExtension",s.INPUT_OBJECT_TYPE_EXTENSION="InputObjectTypeExtension";let j=Object.freeze({});function U(e,t,n=w){let i=new Map;for(let r of Object.values(R))i.set(r,V(t,r));let s,o=Array.isArray(e),a=[e],l=-1,c=[],p=e,d,f,h=[],y=[];do{var v,m,N;l++;let T=l===a.length,I=T&&0!==c.length;if(T){if(d=0===y.length?void 0:h[h.length-1],p=f,f=y.pop(),I){if(o){p=p.slice();let E=0;for(let[g,b]of c){let O=g-E;null===b?(p.splice(O,1),E++):p[O]=b}}else for(let[S,A]of(p=Object.defineProperties({},Object.getOwnPropertyDescriptors(p)),c))p[S]=A}l=s.index,a=s.keys,c=s.edits,o=s.inArray,s=s.prev}else if(f){if(null==(p=f[d=o?l:a[l]]))continue;h.push(d)}let L;if(!Array.isArray(p)){F(p)||_(!1,`Invalid AST Node: ${u(p)}.`);let D=T?null===(v=i.get(p.kind))||void 0===v?void 0:v.leave:null===(m=i.get(p.kind))||void 0===m?void 0:m.enter;if((L=null==D?void 0:D.call(t,p,d,f,h,y))===j)break;if(!1===L){if(!T){h.pop();continue}}else if(void 0!==L&&(c.push([d,L]),!T)){if(F(L))p=L;else{h.pop();continue}}}void 0===L&&I&&c.push([d,p]),T?h.pop():(s={inArray:o,index:l,keys:a,edits:c,prev:s},a=(o=Array.isArray(p))?p:null!==(N=n[p.kind])&&void 0!==N?N:[],l=-1,c=[],f&&y.push(f),f=p)}while(void 0!==s);return 0!==c.length?c[c.length-1][1]:e}function V(e,t){let n=e[t];return"object"==typeof n?n:"function"==typeof n?{enter:n,leave:void 0}:{enter:e.enter,leave:e.leave}}function C(e){return U(e,$)}l(U,"visit"),l(V,"getEnterLeaveForKind"),l(C,"print");let $={Name:{leave:e=>e.value},Variable:{leave:e=>"$"+e.name},Document:{leave:e=>M(e.definitions,"\n\n")},OperationDefinition:{leave(e){let t=k("(",M(e.variableDefinitions,", "),")"),n=M([e.operation,M([e.name,t]),M(e.directives," ")]," ");return("query"===n?"":n+" ")+e.selectionSet}},VariableDefinition:{leave:({variable:e,type:t,defaultValue:n,directives:i})=>e+": "+t+k(" = ",n)+k(" ",M(i," "))},SelectionSet:{leave:({selections:e})=>B(e)},Field:{leave({alias:e,name:t,arguments:n,directives:i,selectionSet:r}){let s=k("",e,": ")+t,o=s+k("(",M(n,", "),")");return o.length>80&&(o=s+k("(\n",G(M(n,"\n")),"\n)")),M([o,M(i," "),r]," ")}},Argument:{leave:({name:e,value:t})=>e+": "+t},FragmentSpread:{leave:({name:e,directives:t})=>"..."+e+k(" ",M(t," "))},InlineFragment:{leave:({typeCondition:e,directives:t,selectionSet:n})=>M(["...",k("on ",e),M(t," "),n]," ")},FragmentDefinition:{leave:({name:e,typeCondition:t,variableDefinitions:n,directives:i,selectionSet:r})=>`fragment ${e}${k("(",M(n,", "),")")} on ${t} ${k("",M(i," ")," ")}`+r},IntValue:{leave:({value:e})=>e},FloatValue:{leave:({value:e})=>e},StringValue:{leave:({value:e,block:t})=>t?b(e):O(e)},BooleanValue:{leave:({value:e})=>e?"true":"false"},NullValue:{leave:()=>"null"},EnumValue:{leave:({value:e})=>e},ListValue:{leave:({values:e})=>"["+M(e,", ")+"]"},ObjectValue:{leave:({fields:e})=>"{"+M(e,", ")+"}"},ObjectField:{leave:({name:e,value:t})=>e+": "+t},Directive:{leave:({name:e,arguments:t})=>"@"+e+k("(",M(t,", "),")")},NamedType:{leave:({name:e})=>e},ListType:{leave:({type:e})=>"["+e+"]"},NonNullType:{leave:({type:e})=>e+"!"},SchemaDefinition:{leave:({description:e,directives:t,operationTypes:n})=>k("",e,"\n")+M(["schema",M(t," "),B(n)]," ")},OperationTypeDefinition:{leave:({operation:e,type:t})=>e+": "+t},ScalarTypeDefinition:{leave:({description:e,name:t,directives:n})=>k("",e,"\n")+M(["scalar",t,M(n," ")]," ")},ObjectTypeDefinition:{leave:({description:e,name:t,interfaces:n,directives:i,fields:r})=>k("",e,"\n")+M(["type",t,k("implements ",M(n," & ")),M(i," "),B(r)]," ")},FieldDefinition:{leave:({description:e,name:t,arguments:n,type:i,directives:r})=>k("",e,"\n")+t+(P(n)?k("(\n",G(M(n,"\n")),"\n)"):k("(",M(n,", "),")"))+": "+i+k(" ",M(r," "))},InputValueDefinition:{leave:({description:e,name:t,type:n,defaultValue:i,directives:r})=>k("",e,"\n")+M([t+": "+n,k("= ",i),M(r," ")]," ")},InterfaceTypeDefinition:{leave:({description:e,name:t,interfaces:n,directives:i,fields:r})=>k("",e,"\n")+M(["interface",t,k("implements ",M(n," & ")),M(i," "),B(r)]," ")},UnionTypeDefinition:{leave:({description:e,name:t,directives:n,types:i})=>k("",e,"\n")+M(["union",t,M(n," "),k("= ",M(i," | "))]," ")},EnumTypeDefinition:{leave:({description:e,name:t,directives:n,values:i})=>k("",e,"\n")+M(["enum",t,M(n," "),B(i)]," ")},EnumValueDefinition:{leave:({description:e,name:t,directives:n})=>k("",e,"\n")+M([t,M(n," ")]," ")},InputObjectTypeDefinition:{leave:({description:e,name:t,directives:n,fields:i})=>k("",e,"\n")+M(["input",t,M(n," "),B(i)]," ")},DirectiveDefinition:{leave:({description:e,name:t,arguments:n,repeatable:i,locations:r})=>k("",e,"\n")+"directive @"+t+(P(n)?k("(\n",G(M(n,"\n")),"\n)"):k("(",M(n,", "),")"))+(i?" repeatable":"")+" on "+M(r," | ")},SchemaExtension:{leave:({directives:e,operationTypes:t})=>M(["extend schema",M(e," "),B(t)]," ")},ScalarTypeExtension:{leave:({name:e,directives:t})=>M(["extend scalar",e,M(t," ")]," ")},ObjectTypeExtension:{leave:({name:e,interfaces:t,directives:n,fields:i})=>M(["extend type",e,k("implements ",M(t," & ")),M(n," "),B(i)]," ")},InterfaceTypeExtension:{leave:({name:e,interfaces:t,directives:n,fields:i})=>M(["extend interface",e,k("implements ",M(t," & ")),M(n," "),B(i)]," ")},UnionTypeExtension:{leave:({name:e,directives:t,types:n})=>M(["extend union",e,M(t," "),k("= ",M(n," | "))]," ")},EnumTypeExtension:{leave:({name:e,directives:t,values:n})=>M(["extend enum",e,M(t," "),B(n)]," ")},InputObjectTypeExtension:{leave:({name:e,directives:t,fields:n})=>M(["extend input",e,M(t," "),B(n)]," ")}};function M(e,t=""){var n;return null!==(n=null==e?void 0:e.filter(e=>e).join(t))&&void 0!==n?n:""}function B(e){return k("{\n",G(M(e,"\n")),"\n}")}function k(e,t,n=""){return null!=t&&""!==t?e+t+n:""}function G(e){return k("  ",e.replace(/\n/g,"\n  "))}function P(e){var t;return null!==(t=null==e?void 0:e.some(e=>e.includes("\n")))&&void 0!==t&&t}function J(e){return"object"==typeof e&&"function"==typeof(null==e?void 0:e[Symbol.iterator])}function Q(e){return"object"==typeof e&&null!==e}function Y(e,t){let[n,i]=t?[e,t]:[void 0,e],r=" Did you mean ";n&&(r+=n+" ");let s=i.map(e=>`"${e}"`);switch(s.length){case 0:return"";case 1:return r+s[0]+"?";case 2:return r+s[0]+" or "+s[1]+"?"}let o=s.slice(0,5),a=o.pop();return r+o.join(", ")+", or "+a+"?"}function z(e){return e}l(M,"join"),l(B,"block"),l(k,"wrap"),l(G,"indent"),l(P,"hasMultilineItems"),l(J,"isIterableObject"),l(Q,"isObjectLike"),l(Y,"didYouMean"),l(z,"identityFunc");let q=l(function(e,t){return e instanceof t},"instanceOf");function H(e,t){let n=Object.create(null);for(let i of e)n[t(i)]=i;return n}function X(e,t,n){let i=Object.create(null);for(let r of e)i[t(r)]=n(r);return i}function W(e,t){let n=Object.create(null);for(let i of Object.keys(e))n[i]=t(e[i],i);return n}function K(e,t){let n=0,i=0;for(;n<e.length&&i<t.length;){let r=e.charCodeAt(n),s=t.charCodeAt(i);if(ee(r)&&ee(s)){let o=0;do++n,o=10*o+r-Z,r=e.charCodeAt(n);while(ee(r)&&o>0);let a=0;do++i,a=10*a+s-Z,s=t.charCodeAt(i);while(ee(s)&&a>0);if(o<a)return -1;if(o>a)return 1}else{if(r<s)return -1;if(r>s)return 1;++n,++i}}return e.length-t.length}l(H,"keyMap"),l(X,"keyValMap"),l(W,"mapValue"),l(K,"naturalCompare");let Z=48;function ee(e){return!isNaN(e)&&Z<=e&&e<=57}function et(e,t){let n=Object.create(null),i=new en(e),r=Math.floor(.4*e.length)+1;for(let s of t){let o=i.measure(s,r);void 0!==o&&(n[s]=o)}return Object.keys(n).sort((e,t)=>{let i=n[e]-n[t];return 0!==i?i:K(e,t)})}l(ee,"isDigit"),l(et,"suggestionList");class en{constructor(e){this._input=e,this._inputLowerCase=e.toLowerCase(),this._inputArray=ei(this._inputLowerCase),this._rows=[Array(e.length+1).fill(0),Array(e.length+1).fill(0),Array(e.length+1).fill(0)]}measure(e,t){if(this._input===e)return 0;let n=e.toLowerCase();if(this._inputLowerCase===n)return 1;let i=ei(n),r=this._inputArray;if(i.length<r.length){let s=i;i=r,r=s}let o=i.length,a=r.length;if(o-a>t)return;let l=this._rows;for(let u=0;u<=a;u++)l[0][u]=u;for(let c=1;c<=o;c++){let p=l[(c-1)%3],d=l[c%3],f=d[0]=c;for(let h=1;h<=a;h++){let y=i[c-1]===r[h-1]?0:1,v=Math.min(p[h]+1,d[h-1]+1,p[h-1]+y);if(c>1&&h>1&&i[c-1]===r[h-2]&&i[c-2]===r[h-1]){let m=l[(c-2)%3][h-2];v=Math.min(v,m+1)}v<f&&(f=v),d[h]=v}if(f>t)return}let N=l[o%3][a];return N<=t?N:void 0}}function ei(e){let t=e.length,n=Array(t);for(let i=0;i<t;++i)n[i]=e.charCodeAt(i);return n}function er(e){if(null==e)return Object.create(null);if(null===Object.getPrototypeOf(e))return e;let t=Object.create(null);for(let[n,i]of Object.entries(e))t[n]=i;return t}l(en,"LexicalDistance"),l(ei,"stringToArray"),l(er,"toObjMap");let es=/\r\n|[\n\r]/g;function eo(e,t){let n=0,i=1;for(let r of e.body.matchAll(es)){if("number"==typeof r.index||v(!1),r.index>=t)break;n=r.index+r[0].length,i+=1}return{line:i,column:t+1-n}}function ea(e){return el(e.source,eo(e.source,e.start))}function el(e,t){let n=e.locationOffset.column-1,i="".padStart(n)+e.body,r=t.line-1,s=e.locationOffset.line-1,o=t.line+s,a=1===t.line?n:0,l=t.column+a,u=`${e.name}:${o}:${l}
`,c=i.split(/\r\n|[\n\r]/g),p=c[r];if(p.length>120){let d=Math.floor(l/80),f=[];for(let h=0;h<p.length;h+=80)f.push(p.slice(h,h+80));return u+eu([[`${o} |`,f[0]],...f.slice(1,d+1).map(e=>["|",e]),["|","^".padStart(l%80)],["|",f[d+1]]])}return u+eu([[`${o-1} |`,c[r-1]],[`${o} |`,p],["|","^".padStart(l)],[`${o+1} |`,c[r+1]]])}function eu(e){let t=e.filter(([e,t])=>void 0!==t),n=Math.max(...t.map(([e])=>e.length));return t.map(([e,t])=>e.padStart(n)+(t?" "+t:"")).join("\n")}function ec(e){let t=e[0];return null==t||"kind"in t||"length"in t?{nodes:t,source:e[1],positions:e[2],path:e[3],originalError:e[4],extensions:e[5]}:t}l(eo,"getLocation"),l(ea,"printLocation"),l(el,"printSourceLocation"),l(eu,"printPrefixedLines"),l(ec,"toNormalizedOptions");class ep extends Error{constructor(e,...t){var n,i,r;let{nodes:s,source:o,positions:a,path:l,originalError:u,extensions:c}=ec(t);super(e),this.name="GraphQLError",this.path=null!=l?l:void 0,this.originalError=null!=u?u:void 0,this.nodes=ed(Array.isArray(s)?s:s?[s]:void 0);let p=ed(null===(n=this.nodes)||void 0===n?void 0:n.map(e=>e.loc).filter(e=>null!=e));this.source=null!=o?o:null==p?void 0:null===(i=p[0])||void 0===i?void 0:i.source,this.positions=null!=a?a:null==p?void 0:p.map(e=>e.start),this.locations=a&&o?a.map(e=>eo(o,e)):null==p?void 0:p.map(e=>eo(e.source,e.start));let d=Q(null==u?void 0:u.extensions)?null==u?void 0:u.extensions:void 0;this.extensions=null!==(r=null!=c?c:d)&&void 0!==r?r:Object.create(null),Object.defineProperties(this,{message:{writable:!0,enumerable:!0},name:{enumerable:!1},nodes:{enumerable:!1},source:{enumerable:!1},positions:{enumerable:!1},originalError:{enumerable:!1}}),null!=u&&u.stack?Object.defineProperty(this,"stack",{value:u.stack,writable:!0,configurable:!0}):Error.captureStackTrace?Error.captureStackTrace(this,ep):Object.defineProperty(this,"stack",{value:Error().stack,writable:!0,configurable:!0})}get[Symbol.toStringTag](){return"GraphQLError"}toString(){let e=this.message;if(this.nodes)for(let t of this.nodes)t.loc&&(e+="\n\n"+ea(t.loc));else if(this.source&&this.locations)for(let n of this.locations)e+="\n\n"+el(this.source,n);return e}toJSON(){let e={message:this.message};return null!=this.locations&&(e.locations=this.locations),null!=this.path&&(e.path=this.path),null!=this.extensions&&Object.keys(this.extensions).length>0&&(e.extensions=this.extensions),e}}function ed(e){return void 0===e||0===e.length?void 0:e}function ef(e,t){switch(e.kind){case R.NULL:return null;case R.INT:return parseInt(e.value,10);case R.FLOAT:return parseFloat(e.value);case R.STRING:case R.ENUM:case R.BOOLEAN:return e.value;case R.LIST:return e.values.map(e=>ef(e,t));case R.OBJECT:return X(e.fields,e=>e.name.value,e=>ef(e.value,t));case R.VARIABLE:return null==t?void 0:t[e.name.value]}}function eh(e){if(null!=e||_(!1,"Must provide name."),"string"==typeof e||_(!1,"Expected name to be a string."),0===e.length)throw new ep("Expected name to be a non-empty string.");for(let t=1;t<e.length;++t)if(!g(e.charCodeAt(t)))throw new ep(`Names must only contain [_a-zA-Z0-9] but "${e}" does not.`);if(!E(e.charCodeAt(0)))throw new ep(`Names must start with [_a-zA-Z] but "${e}" does not.`);return e}function ey(e){if("true"===e||"false"===e||"null"===e)throw new ep(`Enum values cannot be named: ${e}`);return eh(e)}function ev(e){return em(e)||eN(e)||eT(e)||eI(e)||eE(e)||eg(e)||eb(e)||eO(e)}function em(e){return q(e,ex)}function eN(e){return q(e,eR)}function eT(e){return q(e,eB)}function eI(e){return q(e,ek)}function eE(e){return q(e,eP)}function eg(e){return q(e,eY)}function eb(e){return q(e,eL)}function eO(e){return q(e,e_)}function eS(e){return em(e)||eE(e)}function eA(e){return eT(e)||eI(e)}l(ep,"GraphQLError"),l(ed,"undefinedIfEmpty"),l(ef,"valueFromASTUntyped"),l(eh,"assertName"),l(ey,"assertEnumValueName"),l(ev,"isType"),l(em,"isScalarType"),l(eN,"isObjectType"),l(eT,"isInterfaceType"),l(eI,"isUnionType"),l(eE,"isEnumType"),l(eg,"isInputObjectType"),l(eb,"isListType"),l(eO,"isNonNullType"),l(eS,"isLeafType"),l(eA,"isAbstractType");class eL{constructor(e){ev(e)||_(!1,`Expected ${u(e)} to be a GraphQL type.`),this.ofType=e}get[Symbol.toStringTag](){return"GraphQLList"}toString(){return"["+String(this.ofType)+"]"}toJSON(){return this.toString()}}l(eL,"GraphQLList");class e_{constructor(e){ew(e)||_(!1,`Expected ${u(e)} to be a GraphQL nullable type.`),this.ofType=e}get[Symbol.toStringTag](){return"GraphQLNonNull"}toString(){return String(this.ofType)+"!"}toJSON(){return this.toString()}}function ew(e){return ev(e)&&!eO(e)}function eD(e){return"function"==typeof e?e():e}function eF(e){return"function"==typeof e?e():e}l(e_,"GraphQLNonNull"),l(ew,"isNullableType"),l(eD,"resolveReadonlyArrayThunk"),l(eF,"resolveObjMapThunk");class ex{constructor(e){var t,n,i,r;let s=null!==(t=e.parseValue)&&void 0!==t?t:z;this.name=eh(e.name),this.description=e.description,this.specifiedByURL=e.specifiedByURL,this.serialize=null!==(n=e.serialize)&&void 0!==n?n:z,this.parseValue=s,this.parseLiteral=null!==(i=e.parseLiteral)&&void 0!==i?i:(e,t)=>s(ef(e,t)),this.extensions=er(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=null!==(r=e.extensionASTNodes)&&void 0!==r?r:[],null==e.specifiedByURL||"string"==typeof e.specifiedByURL||_(!1,`${this.name} must provide "specifiedByURL" as a string, but got: ${u(e.specifiedByURL)}.`),null==e.serialize||"function"==typeof e.serialize||_(!1,`${this.name} must provide "serialize" function. If this custom Scalar is also used as an input type, ensure "parseValue" and "parseLiteral" functions are also provided.`),e.parseLiteral&&("function"==typeof e.parseValue&&"function"==typeof e.parseLiteral||_(!1,`${this.name} must provide both "parseValue" and "parseLiteral" functions.`))}get[Symbol.toStringTag](){return"GraphQLScalarType"}toConfig(){return{name:this.name,description:this.description,specifiedByURL:this.specifiedByURL,serialize:this.serialize,parseValue:this.parseValue,parseLiteral:this.parseLiteral,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}l(ex,"GraphQLScalarType");class eR{constructor(e){var t;this.name=eh(e.name),this.description=e.description,this.isTypeOf=e.isTypeOf,this.extensions=er(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=null!==(t=e.extensionASTNodes)&&void 0!==t?t:[],this._fields=()=>eU(e),this._interfaces=()=>ej(e),null==e.isTypeOf||"function"==typeof e.isTypeOf||_(!1,`${this.name} must provide "isTypeOf" as a function, but got: ${u(e.isTypeOf)}.`)}get[Symbol.toStringTag](){return"GraphQLObjectType"}getFields(){return"function"==typeof this._fields&&(this._fields=this._fields()),this._fields}getInterfaces(){return"function"==typeof this._interfaces&&(this._interfaces=this._interfaces()),this._interfaces}toConfig(){return{name:this.name,description:this.description,interfaces:this.getInterfaces(),fields:e$(this.getFields()),isTypeOf:this.isTypeOf,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}function ej(e){var t;let n=eD(null!==(t=e.interfaces)&&void 0!==t?t:[]);return Array.isArray(n)||_(!1,`${e.name} interfaces must be an Array or a function which returns an Array.`),n}function eU(e){let t=eF(e.fields);return eC(t)||_(!1,`${e.name} fields must be an object with field names as keys or a function which returns such an object.`),W(t,(t,n)=>{var i;eC(t)||_(!1,`${e.name}.${n} field config must be an object.`),null==t.resolve||"function"==typeof t.resolve||_(!1,`${e.name}.${n} field resolver must be a function if provided, but got: ${u(t.resolve)}.`);let r=null!==(i=t.args)&&void 0!==i?i:{};return eC(r)||_(!1,`${e.name}.${n} args must be an object with argument names as keys.`),{name:eh(n),description:t.description,type:t.type,args:eV(r),resolve:t.resolve,subscribe:t.subscribe,deprecationReason:t.deprecationReason,extensions:er(t.extensions),astNode:t.astNode}})}function eV(e){return Object.entries(e).map(([e,t])=>({name:eh(e),description:t.description,type:t.type,defaultValue:t.defaultValue,deprecationReason:t.deprecationReason,extensions:er(t.extensions),astNode:t.astNode}))}function eC(e){return Q(e)&&!Array.isArray(e)}function e$(e){return W(e,e=>({description:e.description,type:e.type,args:eM(e.args),resolve:e.resolve,subscribe:e.subscribe,deprecationReason:e.deprecationReason,extensions:e.extensions,astNode:e.astNode}))}function eM(e){return X(e,e=>e.name,e=>({description:e.description,type:e.type,defaultValue:e.defaultValue,deprecationReason:e.deprecationReason,extensions:e.extensions,astNode:e.astNode}))}l(eR,"GraphQLObjectType"),l(ej,"defineInterfaces"),l(eU,"defineFieldMap"),l(eV,"defineArguments"),l(eC,"isPlainObj"),l(e$,"fieldsToFieldsConfig"),l(eM,"argsToArgsConfig");class eB{constructor(e){var t;this.name=eh(e.name),this.description=e.description,this.resolveType=e.resolveType,this.extensions=er(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=null!==(t=e.extensionASTNodes)&&void 0!==t?t:[],this._fields=eU.bind(void 0,e),this._interfaces=ej.bind(void 0,e),null==e.resolveType||"function"==typeof e.resolveType||_(!1,`${this.name} must provide "resolveType" as a function, but got: ${u(e.resolveType)}.`)}get[Symbol.toStringTag](){return"GraphQLInterfaceType"}getFields(){return"function"==typeof this._fields&&(this._fields=this._fields()),this._fields}getInterfaces(){return"function"==typeof this._interfaces&&(this._interfaces=this._interfaces()),this._interfaces}toConfig(){return{name:this.name,description:this.description,interfaces:this.getInterfaces(),fields:e$(this.getFields()),resolveType:this.resolveType,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}l(eB,"GraphQLInterfaceType");class ek{constructor(e){var t;this.name=eh(e.name),this.description=e.description,this.resolveType=e.resolveType,this.extensions=er(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=null!==(t=e.extensionASTNodes)&&void 0!==t?t:[],this._types=eG.bind(void 0,e),null==e.resolveType||"function"==typeof e.resolveType||_(!1,`${this.name} must provide "resolveType" as a function, but got: ${u(e.resolveType)}.`)}get[Symbol.toStringTag](){return"GraphQLUnionType"}getTypes(){return"function"==typeof this._types&&(this._types=this._types()),this._types}toConfig(){return{name:this.name,description:this.description,types:this.getTypes(),resolveType:this.resolveType,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}function eG(e){let t=eD(e.types);return Array.isArray(t)||_(!1,`Must provide Array of types or a function which returns such an array for Union ${e.name}.`),t}l(ek,"GraphQLUnionType"),l(eG,"defineTypes");class eP{constructor(e){var t;this.name=eh(e.name),this.description=e.description,this.extensions=er(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=null!==(t=e.extensionASTNodes)&&void 0!==t?t:[],this._values=eQ(this.name,e.values),this._valueLookup=new Map(this._values.map(e=>[e.value,e])),this._nameLookup=H(this._values,e=>e.name)}get[Symbol.toStringTag](){return"GraphQLEnumType"}getValues(){return this._values}getValue(e){return this._nameLookup[e]}serialize(e){let t=this._valueLookup.get(e);if(void 0===t)throw new ep(`Enum "${this.name}" cannot represent value: ${u(e)}`);return t.name}parseValue(e){if("string"!=typeof e){let t=u(e);throw new ep(`Enum "${this.name}" cannot represent non-string value: ${t}.`+eJ(this,t))}let n=this.getValue(e);if(null==n)throw new ep(`Value "${e}" does not exist in "${this.name}" enum.`+eJ(this,e));return n.value}parseLiteral(e,t){if(e.kind!==R.ENUM){let n=C(e);throw new ep(`Enum "${this.name}" cannot represent non-enum value: ${n}.`+eJ(this,n),{nodes:e})}let i=this.getValue(e.value);if(null==i){let r=C(e);throw new ep(`Value "${r}" does not exist in "${this.name}" enum.`+eJ(this,r),{nodes:e})}return i.value}toConfig(){let e=X(this.getValues(),e=>e.name,e=>({description:e.description,value:e.value,deprecationReason:e.deprecationReason,extensions:e.extensions,astNode:e.astNode}));return{name:this.name,description:this.description,values:e,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}function eJ(e,t){let n=e.getValues().map(e=>e.name),i=et(t,n);return Y("the enum value",i)}function eQ(e,t){return eC(t)||_(!1,`${e} values must be an object with value names as keys.`),Object.entries(t).map(([t,n])=>(eC(n)||_(!1,`${e}.${t} must refer to an object with a "value" key representing an internal value but got: ${u(n)}.`),{name:ey(t),description:n.description,value:void 0!==n.value?n.value:t,deprecationReason:n.deprecationReason,extensions:er(n.extensions),astNode:n.astNode}))}l(eP,"GraphQLEnumType"),l(eJ,"didYouMeanEnumValue"),l(eQ,"defineEnumValues");class eY{constructor(e){var t;this.name=eh(e.name),this.description=e.description,this.extensions=er(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=null!==(t=e.extensionASTNodes)&&void 0!==t?t:[],this._fields=ez.bind(void 0,e)}get[Symbol.toStringTag](){return"GraphQLInputObjectType"}getFields(){return"function"==typeof this._fields&&(this._fields=this._fields()),this._fields}toConfig(){let e=W(this.getFields(),e=>({description:e.description,type:e.type,defaultValue:e.defaultValue,deprecationReason:e.deprecationReason,extensions:e.extensions,astNode:e.astNode}));return{name:this.name,description:this.description,fields:e,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes}}toString(){return this.name}toJSON(){return this.toString()}}function ez(e){let t=eF(e.fields);return eC(t)||_(!1,`${e.name} fields must be an object with field names as keys or a function which returns such an object.`),W(t,(t,n)=>("resolve"in t&&_(!1,`${e.name}.${n} field has a resolve property, but Input Types cannot define resolvers.`),{name:eh(n),description:t.description,type:t.type,defaultValue:t.defaultValue,deprecationReason:t.deprecationReason,extensions:er(t.extensions),astNode:t.astNode}))}l(eY,"GraphQLInputObjectType"),l(ez,"defineInputFieldMap");let eq=new ex({name:"Int",description:"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.",serialize(e){let t=eZ(e);if("boolean"==typeof t)return t?1:0;let n=t;if("string"==typeof t&&""!==t&&(n=Number(t)),"number"!=typeof n||!Number.isInteger(n))throw new ep(`Int cannot represent non-integer value: ${u(t)}`);if(n>2147483647||n<-2147483648)throw new ep("Int cannot represent non 32-bit signed integer value: "+u(t));return n},parseValue(e){if("number"!=typeof e||!Number.isInteger(e))throw new ep(`Int cannot represent non-integer value: ${u(e)}`);if(e>2147483647||e<-2147483648)throw new ep(`Int cannot represent non 32-bit signed integer value: ${e}`);return e},parseLiteral(e){if(e.kind!==R.INT)throw new ep(`Int cannot represent non-integer value: ${C(e)}`,{nodes:e});let t=parseInt(e.value,10);if(t>2147483647||t<-2147483648)throw new ep(`Int cannot represent non 32-bit signed integer value: ${e.value}`,{nodes:e});return t}}),eH=new ex({name:"Float",description:"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).",serialize(e){let t=eZ(e);if("boolean"==typeof t)return t?1:0;let n=t;if("string"==typeof t&&""!==t&&(n=Number(t)),"number"!=typeof n||!Number.isFinite(n))throw new ep(`Float cannot represent non numeric value: ${u(t)}`);return n},parseValue(e){if("number"!=typeof e||!Number.isFinite(e))throw new ep(`Float cannot represent non numeric value: ${u(e)}`);return e},parseLiteral(e){if(e.kind!==R.FLOAT&&e.kind!==R.INT)throw new ep(`Float cannot represent non numeric value: ${C(e)}`,e);return parseFloat(e.value)}}),eX=new ex({name:"String",description:"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.",serialize(e){let t=eZ(e);if("string"==typeof t)return t;if("boolean"==typeof t)return t?"true":"false";if("number"==typeof t&&Number.isFinite(t))return t.toString();throw new ep(`String cannot represent value: ${u(e)}`)},parseValue(e){if("string"!=typeof e)throw new ep(`String cannot represent a non string value: ${u(e)}`);return e},parseLiteral(e){if(e.kind!==R.STRING)throw new ep(`String cannot represent a non string value: ${C(e)}`,{nodes:e});return e.value}}),eW=new ex({name:"Boolean",description:"The `Boolean` scalar type represents `true` or `false`.",serialize(e){let t=eZ(e);if("boolean"==typeof t)return t;if(Number.isFinite(t))return 0!==t;throw new ep(`Boolean cannot represent a non boolean value: ${u(t)}`)},parseValue(e){if("boolean"!=typeof e)throw new ep(`Boolean cannot represent a non boolean value: ${u(e)}`);return e},parseLiteral(e){if(e.kind!==R.BOOLEAN)throw new ep(`Boolean cannot represent a non boolean value: ${C(e)}`,{nodes:e});return e.value}}),eK=new ex({name:"ID",description:'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.',serialize(e){let t=eZ(e);if("string"==typeof t)return t;if(Number.isInteger(t))return String(t);throw new ep(`ID cannot represent value: ${u(e)}`)},parseValue(e){if("string"==typeof e)return e;if("number"==typeof e&&Number.isInteger(e))return e.toString();throw new ep(`ID cannot represent value: ${u(e)}`)},parseLiteral(e){if(e.kind!==R.STRING&&e.kind!==R.INT)throw new ep("ID cannot represent a non-string and non-integer value: "+C(e),{nodes:e});return e.value}});function eZ(e){if(Q(e)){if("function"==typeof e.valueOf){let t=e.valueOf();if(!Q(t))return t}if("function"==typeof e.toJSON)return e.toJSON()}return e}function e0(e,t){if(eO(t)){let n=e0(e,t.ofType);return(null==n?void 0:n.kind)===R.NULL?null:n}if(null===e)return{kind:R.NULL};if(void 0===e)return null;if(eb(t)){let i=t.ofType;if(J(e)){let r=[];for(let s of e){let o=e0(s,i);null!=o&&r.push(o)}return{kind:R.LIST,values:r}}return e0(e,i)}if(eg(t)){if(!Q(e))return null;let a=[];for(let l of Object.values(t.getFields())){let c=e0(e[l.name],l.type);c&&a.push({kind:R.OBJECT_FIELD,name:{kind:R.NAME,value:l.name},value:c})}return{kind:R.OBJECT,fields:a}}if(eS(t)){let p=t.serialize(e);if(null==p)return null;if("boolean"==typeof p)return{kind:R.BOOLEAN,value:p};if("number"==typeof p&&Number.isFinite(p)){let d=String(p);return e1.test(d)?{kind:R.INT,value:d}:{kind:R.FLOAT,value:d}}if("string"==typeof p)return eE(t)?{kind:R.ENUM,value:p}:t===eK&&e1.test(p)?{kind:R.INT,value:p}:{kind:R.STRING,value:p};throw TypeError(`Cannot convert value to AST: ${u(p)}.`)}v(!1,"Unexpected input type: "+u(t))}Object.freeze([eX,eq,eH,eW,eK]),l(eZ,"serializeObject"),l(e0,"astFromValue");let e1=/^-?(?:0|[1-9][0-9]*)$/,e8=new eR({name:"__Schema",description:"A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.",fields:()=>({description:{type:eX,resolve:e=>e.description},types:{description:"A list of all types supported by this server.",type:new e_(new eL(new e_(e9))),resolve:e=>Object.values(e.getTypeMap())},queryType:{description:"The type that query operations will be rooted at.",type:new e_(e9),resolve:e=>e.getQueryType()},mutationType:{description:"If this server supports mutation, the type that mutation operations will be rooted at.",type:e9,resolve:e=>e.getMutationType()},subscriptionType:{description:"If this server support subscription, the type that subscription operations will be rooted at.",type:e9,resolve:e=>e.getSubscriptionType()},directives:{description:"A list of all directives supported by this server.",type:new e_(new eL(new e_(e4))),resolve:e=>e.getDirectives()}})}),e4=new eR({name:"__Directive",description:"A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.\n\nIn some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.",fields:()=>({name:{type:new e_(eX),resolve:e=>e.name},description:{type:eX,resolve:e=>e.description},isRepeatable:{type:new e_(eW),resolve:e=>e.isRepeatable},locations:{type:new e_(new eL(new e_(e2))),resolve:e=>e.locations},args:{type:new e_(new eL(new e_(e7))),args:{includeDeprecated:{type:eW,defaultValue:!1}},resolve:(e,{includeDeprecated:t})=>t?e.args:e.args.filter(e=>null==e.deprecationReason)}})}),e2=new eP({name:"__DirectiveLocation",description:"A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.",values:{QUERY:{value:m.QUERY,description:"Location adjacent to a query operation."},MUTATION:{value:m.MUTATION,description:"Location adjacent to a mutation operation."},SUBSCRIPTION:{value:m.SUBSCRIPTION,description:"Location adjacent to a subscription operation."},FIELD:{value:m.FIELD,description:"Location adjacent to a field."},FRAGMENT_DEFINITION:{value:m.FRAGMENT_DEFINITION,description:"Location adjacent to a fragment definition."},FRAGMENT_SPREAD:{value:m.FRAGMENT_SPREAD,description:"Location adjacent to a fragment spread."},INLINE_FRAGMENT:{value:m.INLINE_FRAGMENT,description:"Location adjacent to an inline fragment."},VARIABLE_DEFINITION:{value:m.VARIABLE_DEFINITION,description:"Location adjacent to a variable definition."},SCHEMA:{value:m.SCHEMA,description:"Location adjacent to a schema definition."},SCALAR:{value:m.SCALAR,description:"Location adjacent to a scalar definition."},OBJECT:{value:m.OBJECT,description:"Location adjacent to an object type definition."},FIELD_DEFINITION:{value:m.FIELD_DEFINITION,description:"Location adjacent to a field definition."},ARGUMENT_DEFINITION:{value:m.ARGUMENT_DEFINITION,description:"Location adjacent to an argument definition."},INTERFACE:{value:m.INTERFACE,description:"Location adjacent to an interface definition."},UNION:{value:m.UNION,description:"Location adjacent to a union definition."},ENUM:{value:m.ENUM,description:"Location adjacent to an enum definition."},ENUM_VALUE:{value:m.ENUM_VALUE,description:"Location adjacent to an enum value definition."},INPUT_OBJECT:{value:m.INPUT_OBJECT,description:"Location adjacent to an input object type definition."},INPUT_FIELD_DEFINITION:{value:m.INPUT_FIELD_DEFINITION,description:"Location adjacent to an input object field definition."}}}),e9=new eR({name:"__Type",description:"The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\n\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.",fields:()=>({kind:{type:new e_(te),resolve:e=>em(e)?e6.SCALAR:eN(e)?e6.OBJECT:eT(e)?e6.INTERFACE:eI(e)?e6.UNION:eE(e)?e6.ENUM:eg(e)?e6.INPUT_OBJECT:eb(e)?e6.LIST:eO(e)?e6.NON_NULL:void v(!1,`Unexpected type: "${u(e)}".`)},name:{type:eX,resolve:e=>"name"in e?e.name:void 0},description:{type:eX,resolve:e=>"description"in e?e.description:void 0},specifiedByURL:{type:eX,resolve:e=>"specifiedByURL"in e?e.specifiedByURL:void 0},fields:{type:new eL(new e_(e3)),args:{includeDeprecated:{type:eW,defaultValue:!1}},resolve(e,{includeDeprecated:t}){if(eN(e)||eT(e)){let n=Object.values(e.getFields());return t?n:n.filter(e=>null==e.deprecationReason)}}},interfaces:{type:new eL(new e_(e9)),resolve(e){if(eN(e)||eT(e))return e.getInterfaces()}},possibleTypes:{type:new eL(new e_(e9)),resolve(e,t,n,{schema:i}){if(eA(e))return i.getPossibleTypes(e)}},enumValues:{type:new eL(new e_(e5)),args:{includeDeprecated:{type:eW,defaultValue:!1}},resolve(e,{includeDeprecated:t}){if(eE(e)){let n=e.getValues();return t?n:n.filter(e=>null==e.deprecationReason)}}},inputFields:{type:new eL(new e_(e7)),args:{includeDeprecated:{type:eW,defaultValue:!1}},resolve(e,{includeDeprecated:t}){if(eg(e)){let n=Object.values(e.getFields());return t?n:n.filter(e=>null==e.deprecationReason)}}},ofType:{type:e9,resolve:e=>"ofType"in e?e.ofType:void 0}})}),e3=new eR({name:"__Field",description:"Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.",fields:()=>({name:{type:new e_(eX),resolve:e=>e.name},description:{type:eX,resolve:e=>e.description},args:{type:new e_(new eL(new e_(e7))),args:{includeDeprecated:{type:eW,defaultValue:!1}},resolve:(e,{includeDeprecated:t})=>t?e.args:e.args.filter(e=>null==e.deprecationReason)},type:{type:new e_(e9),resolve:e=>e.type},isDeprecated:{type:new e_(eW),resolve:e=>null!=e.deprecationReason},deprecationReason:{type:eX,resolve:e=>e.deprecationReason}})}),e7=new eR({name:"__InputValue",description:"Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.",fields:()=>({name:{type:new e_(eX),resolve:e=>e.name},description:{type:eX,resolve:e=>e.description},type:{type:new e_(e9),resolve:e=>e.type},defaultValue:{type:eX,description:"A GraphQL-formatted string representing the default value for this input value.",resolve(e){let{type:t,defaultValue:n}=e,i=e0(n,t);return i?C(i):null}},isDeprecated:{type:new e_(eW),resolve:e=>null!=e.deprecationReason},deprecationReason:{type:eX,resolve:e=>e.deprecationReason}})}),e5=new eR({name:"__EnumValue",description:"One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.",fields:()=>({name:{type:new e_(eX),resolve:e=>e.name},description:{type:eX,resolve:e=>e.description},isDeprecated:{type:new e_(eW),resolve:e=>null!=e.deprecationReason},deprecationReason:{type:eX,resolve:e=>e.deprecationReason}})}),e6;(o=e6||(e6={})).SCALAR="SCALAR",o.OBJECT="OBJECT",o.INTERFACE="INTERFACE",o.UNION="UNION",o.ENUM="ENUM",o.INPUT_OBJECT="INPUT_OBJECT",o.LIST="LIST",o.NON_NULL="NON_NULL";let te=new eP({name:"__TypeKind",description:"An enum describing what kind of type a given `__Type` is.",values:{SCALAR:{value:e6.SCALAR,description:"Indicates this type is a scalar."},OBJECT:{value:e6.OBJECT,description:"Indicates this type is an object. `fields` and `interfaces` are valid fields."},INTERFACE:{value:e6.INTERFACE,description:"Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields."},UNION:{value:e6.UNION,description:"Indicates this type is a union. `possibleTypes` is a valid field."},ENUM:{value:e6.ENUM,description:"Indicates this type is an enum. `enumValues` is a valid field."},INPUT_OBJECT:{value:e6.INPUT_OBJECT,description:"Indicates this type is an input object. `inputFields` is a valid field."},LIST:{value:e6.LIST,description:"Indicates this type is a list. `ofType` is a valid field."},NON_NULL:{value:e6.NON_NULL,description:"Indicates this type is a non-null. `ofType` is a valid field."}}}),tt={name:"__schema",type:new e_(e8),description:"Access the current type schema of this server.",args:[],resolve:(e,t,n,{schema:i})=>i,deprecationReason:void 0,extensions:Object.create(null),astNode:void 0},tn={name:"__type",type:e9,description:"Request the type information of a single type.",args:[{name:"name",description:void 0,type:new e_(eX),defaultValue:void 0,deprecationReason:void 0,extensions:Object.create(null),astNode:void 0}],resolve:(e,{name:t},n,{schema:i})=>i.getType(t),deprecationReason:void 0,extensions:Object.create(null),astNode:void 0},ti={name:"__typename",type:new e_(eX),description:"The name of the current Object type at runtime.",args:[],resolve:(e,t,n,{parentType:i})=>i.name,deprecationReason:void 0,extensions:Object.create(null),astNode:void 0};Object.freeze([e8,e4,e2,e9,e3,e7,e5,te])}}]);